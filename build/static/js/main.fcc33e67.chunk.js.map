{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","tmdbId","id","then","url","urlParams","URLSearchParams","URL","search","catch","e","console","log","handleClick","src","poster_path","backdrop_path","alt","name","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAOeA,E,OALEC,EAAMC,OAAO,CAC5BC,QAAU,iC,wCC4DGC,MAvDf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAE9B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAkCA,OAhCAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAIT,GADlC,cACQU,EADR,OAEEN,EAAUM,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdG,KACC,CAACb,IA0BF,sBAAKc,UAAU,MAAf,UACE,6BAAKf,IAEL,qBAAKe,UAAU,cAAf,SACGX,EAAOY,KAAI,SAACC,GAAD,OACV,qBAEEC,QAAS,kBAvBC,SAACD,GACfX,EACFC,EAAc,IAGdY,IAAa,KAAM,CAAEC,OAAM,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAOI,KACjCC,MAAK,SAACC,GACL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDpB,EAAciB,EAAUd,IAAI,SAG7BkB,OAAM,SAACC,GAAQC,QAAQC,IAAIF,GAAIC,QAAQC,IAAIzB,MAYzB0B,CAAYf,IAC3BF,UAAS,qBAAgBb,GAAc,mBACvC+B,IAAG,UAjDE,oCAiDF,OAAgB/B,EAAae,EAAMiB,YAAcjB,EAAMkB,eAAiBC,IAAKnB,EAAMoB,MAHjFpB,EAAMI,SAMhBf,GAAc,cAAC,IAAD,CAASgC,QAAShC,EAAYiC,KApCpC,CACXC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACVC,SAAU,UC1BVC,EAAU,mCAeDC,EAbE,CAEfC,cAAc,8BAAD,OAA+BF,EAA/B,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,sBACrBI,cAAa,mCAA+BJ,EAA/B,mBACbK,kBAAiB,kCAA8BL,EAA9B,mBACjBM,kBAAiB,kCAA8BN,EAA9B,mBACjBO,kBAAiB,kCAA8BP,EAA9B,mBACjBQ,mBAAkB,kCAA8BR,EAA9B,sBAClBS,mBAAkB,kCAA8BT,EAA9B,oB,MC2CLU,MAjDf,WAEE,IAckBC,EAAKC,EAdvB,EAA0BrD,mBAAS,IAAnC,mBAAOc,EAAP,KAAcwC,EAAd,KAkBA,OAhBAjD,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAImC,EAASE,uBAD3C,OACQpC,EADR,OAEE8C,EACE9C,EAAQC,KAAKC,QACb6C,KAAKC,MAAMD,KAAKE,SAAWjD,EAAQC,KAAKC,QAAQgD,OAAS,KAJ7D,4CADc,uBAAC,WAAD,wBASd/C,KACC,IAOD,yBAAQC,UAAU,SAAS+C,MACzB,CACEC,eAAgB,QAChBC,gBAAgB,wDAAD,cAC0B/C,QAD1B,IAC0BA,OAD1B,EAC0BA,EAAOkB,cADjC,gBAGf8B,mBAAoB,iBANxB,UAUE,sBAAKlD,UAAU,kBAAf,UACE,oBAAIA,UAAU,eAAd,UACQ,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOoB,QAAvB,OAA+BpB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOiD,iBAEzC,gCACE,wBAAQnD,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,wBAEF,oBAAIA,UAAU,qBAAd,UAvBYwC,EAwBD,OAACtC,QAAD,IAACA,OAAD,EAACA,EAAOkD,SAxBFX,EAwBY,KAvBtB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAKD,EAAIa,OAAO,EAAGZ,EAAI,GAAK,MAAQD,QA2BxD,qBAAKxC,UAAU,0B,YCfNsD,MA/Bf,WAEE,MAA2BlE,oBAAS,GAApC,mBAAOmE,EAAP,KAAaC,EAAb,KAeA,OAbA/D,qBAAU,WAQR,OAPAgE,OAAOC,iBAAiB,UAAU,WAChC,KAAID,OAAOE,QAAU,KAGnB,OAAOH,GAAW,GAFlBA,GAAW,MAKR,WACLC,OAAOG,oBAAoB,aAE5B,IAGD,sBAAK5D,UAAS,cAASuD,GAAQ,aAA/B,UACE,qBACEvD,UAAU,WACVkB,IAAI,4EACJG,IAAI,iBAEN,qBACErB,UAAU,aACVkB,IAAI,yEAAyEG,IAAI,aCJ1EwC,MAnBf,WACE,OACE,sBAAK7D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IAEA,cAAC,EAAD,CAAKf,MAAM,mBAAmBC,SAAU4C,EAASE,sBAC/C7C,YAAU,IACZ,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU4C,EAASC,gBAC7C,cAAC,EAAD,CAAK9C,MAAM,YAAYC,SAAU4C,EAASG,gBAC1C,cAAC,EAAD,CAAKhD,MAAM,gBAAgBC,SAAU4C,EAASI,oBAC9C,cAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU4C,EAASK,oBAC9C,cAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU4C,EAASM,oBAC9C,cAAC,EAAD,CAAKnD,MAAM,iBAAiBC,SAAU4C,EAASO,qBAC/C,cAAC,EAAD,CAAKpD,MAAM,gBAAgBC,SAAU4C,EAASQ,yBCRrCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fcc33e67.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL : \"https://api.themoviedb.org/3\",\n});\n \n\nexport default instance;","import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport \"./Row.css\"\nimport Youtube from 'react-youtube'\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p/w500/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    }\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      // movieTrailer(movie?.name)\n      movieTrailer(null, { tmdbId: movie?.id })\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n          // setTrailerUrl(url)\n        })\n        .catch((e) => { console.log(e); console.log(trailerUrl); })\n    }\n  }\n\n  return (\n    <div className='row'>\n      <h2>{title}</h2>\n\n      <div className='row_posters'>\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  )\n}\n\nexport default Row;","const API_KEY = '730dcd77e783950f49d7880c1a374e95';\n\nconst requests = {\n\n  fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies : `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries : `/discover/movie?api_key=${API_KEY}&with_genres=99`\n\n}\n\nexport default requests;","import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport requests from './requests'\nimport \"./Banner.css\";\n\nfunction Banner() {\n\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      )\n    }\n    fetchData();\n  }, [])\n\n  function truncate(str, n) {\n    return (str?.length > n) ? str.substr(0, n - 1) + '...' : str;\n  };\n\n  return (\n    <header className=\"banner\" style={\n      {\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n          \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\"\n      }\n    }>\n\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div>\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n\n      <div className=\"banner-fadeBottom\" />\n    </header>\n  )\n}\n\nexport default Banner\n","import { BackgroundColor } from 'chalk'\nimport React, { useState, useEffect } from 'react'\nimport './Nav.css'\nfunction Nav() {\n\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        return handleShow(false);\n      }\n    });\n    return () => {\n      window.removeEventListener('scroll')\n    }\n  }, [])\n\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"Netflix Logo\" />\n\n      <img\n        className=\"nav_avatar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"user\" />\n    </div>\n  )\n}\n\nexport default Nav\n","import './App.css';\nimport Row from './Row'\nimport requests from './requests'\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n\n      <Row title=\"Netflix Orginals\" fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}